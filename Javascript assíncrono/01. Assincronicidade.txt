Definição -

Assíncrono: que não ocorre ou não se efetiva ao mesmo tempo.

O javascript roda de maneira síncrona.


Promises - 

Promises é um objeto de processamento assíncrono. Inicialmente, seu valor é desconhecido. Ela pode, então, ser resolvida ou rejeitada. 

Uma promise pode ter três estados: 1: pending, 2: fulfilled e 3) rejected.

Exemplo de promise:

	const myPromise = new Promise((resolve, reject) => {
		window.setTimeout(() => {
			resolve(console.log('Resolvida!'));
		}, 2000);
	});

Exemplo de manipulação em promise:

	const myPromise = new Promise((resolve, reject) => {
		window.setTimeout(() => {
			resolve(console.log('Resolvida!'));
		}, 2000);
	});

	await myPromise
		.then((result) => result + ' passando pelo then')
		.then((result) => result + ' e agora acabou!')
		.catch((err) => console.log(err.message));

	// Após 2 segundos, retornará o valor
	// "Resolvida passando pelo then e agora acabou!"


Async/Await -

Funções assíncronas precisam dessas duas palavras-chave.

	async function resolvePromise() {
		const myPromise = new Promise((resolve, reject) => {
			window.setTimeout(() => {
				resolve('Resolvida');
			}, 3000);
	});

	const resolved = await myPromise
		.then((result) => result + ' passando pelo then')
		.then((result) => result + ' e agora acabou!')
		.catch((err) => console.log(err.message));

	return resolved;
	}

Funções assíncronas também retornam Promises.

Também é possível utilizar o try...catch:

async function resolvePromise() {
	
	const myPromise = new Promise((resolve, reject) => {
		window.setTimeout(() => {
			resolve('Resolvida');
		}, 3000);
	});
	
	let result;

	try {
		result = await myPromise
		.then((result) => result + ' passando pelo then')
		.then((result) => result + ' e agora acabou!')
	} catch(err) {
		result = err.message;
	}
	
	return result;
	}